[
  {
    "appcode": "function OnUpdate(doc, meta) {\n\n    let new_doc = doc\n    let eventing = new_doc.eventing ?? {}\n    \n    if ( eventing.success ) {\n        return\n    }\n    \n    if ( doc.type == 'application/pdf' ) {\n        EventingLog(new_doc, meta, {...eventing, 'success': true, 'message': 'processing'})\n        \n        let parse_result = ParseDoc(doc, meta)\n        eventing = {...eventing, ...parse_result}\n    } else {\n        eventing.success = true\n        eventing.message = 'skip'\n    }\n    \n    EventingLog(new_doc, meta, eventing)\n    \n    log(\"processed\", meta.id);\n}\n\nfunction EventingLog(new_doc, meta, eventing) {\n    log(eventing)\n    eventing.time = new Date()\n    new_doc.eventing = eventing\n    self[meta.id] = new_doc\n}\n\nfunction ParseDoc(doc, meta) {\n    \n    let request = {\n        path: '/parse_document',\n        params: {},\n        body: {\n            'id': meta.id,\n            'path': doc.path\n        }\n    }\n    \n    let result = {\n        'success': true\n    }\n        \n    try {\n        let response = curl('POST', end_point, request);\n    \n        if (response.status != 200) {\n            log(\"Failed to create embedding\", response.status, response.body)\n            result.success = false\n            result.error = response.body\n        }\n    } catch (e) {\n        log(e)\n        result.success = false\n        result.error = e\n    }\n    \n    \n    return result;\n}\n\nfunction OnDelete(meta, options) {\n    log(\"Doc deleted/expired\", meta.id);\n}",
    "depcfg": {
      "buckets": [
        {
          "alias": "self",
          "bucket_name": "data",
          "scope_name": "uat",
          "collection_name": "meta",
          "access": "rw"
        }
      ],
      "curl": [
        {
          "hostname": "http://192.168.11.106:5002",
          "value": "end_point",
          "auth_type": "no-auth",
          "username": "",
          "password": "",
          "bearer_key": "",
          "allow_cookies": true,
          "validate_ssl_certificate": false
        }
      ],
      "source_bucket": "data",
      "source_scope": "uat",
      "source_collection": "meta",
      "metadata_bucket": "data",
      "metadata_scope": "uat",
      "metadata_collection": "event"
    },
    "version": "evt-7.6.1-3200-ee",
    "enforce_schema": false,
    "handleruuid": 1229013783,
    "function_instance_id": "o9*NQ",
    "appname": "fileEvent",
    "settings": {
      "cursor_aware": false,
      "dcp_stream_boundary": "from_now",
      "deployment_status": false,
      "description": "",
      "execution_timeout": 300,
      "language_compatibility": "7.2.0",
      "log_level": "INFO",
      "n1ql_consistency": "none",
      "num_timer_partitions": 128,
      "processing_status": false,
      "timer_context_size": 1024,
      "user_prefix": "eventing",
      "worker_count": 1
    },
    "function_scope": {
      "bucket": "data",
      "scope": "uat"
    }
  }
]